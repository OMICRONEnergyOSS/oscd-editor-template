import { LitElement, TemplateResult } from 'lit';
import { MdOutlinedButton } from '@scopedelement/material-web/button/MdOutlinedButton.js';
import { MdFilledIconButton } from '@scopedelement/material-web/iconbutton/MdFilledIconButton.js';
import { MdIcon } from '@scopedelement/material-web/icon/MdIcon.js';
import { OscdEditorTemplateTextfield } from './components/OscdEditorTemplateTextfield.js';
import { ActionList } from '@openenergytools/filterable-lists/dist/ActionList.js';
import OscdEditDialog from '@omicronenergy/oscd-edit-dialog/OscdEditDialog.js';
import type { CreateWizard, EditWizard } from '@omicronenergy/oscd-edit-dialog/OscdEditDialog.js';
declare const OscdEditorTemplate_base: typeof LitElement & import("@open-wc/scoped-elements/lit-element.js").ScopedElementsHostConstructor;
/** An editor [[`plugin`]] for editing the `DataTypeTemplates` section. */
export default class OscdEditorTemplate extends OscdEditorTemplate_base {
    static scopedElements: {
        'md-outline-button': typeof MdOutlinedButton;
        'md-filled-icon-button': typeof MdFilledIconButton;
        'md-icon': typeof MdIcon;
        'action-list': typeof ActionList;
        'oscd-editor-template-textfield': typeof OscdEditorTemplateTextfield;
        'oscd-edit-dialog': typeof OscdEditDialog;
    };
    /** The document being edited as provided to plugins by [[`OpenSCD`]]. */
    doc: XMLDocument;
    docName: string;
    docVersion: unknown;
    selectedLNodeType: Element | null | undefined;
    selectedDOType: Element | null | undefined;
    selectedDAType: Element | null | undefined;
    selectedEnumType: Element | null | undefined;
    get dataTypeTemplate(): Element | null;
    lNodeTypeDiff: boolean;
    lNodeTypeInputs?: OscdEditorTemplateTextfield[];
    doTypeDiff: boolean;
    doTypeInputs?: OscdEditorTemplateTextfield[];
    daTypeDiff: boolean;
    daTypeInputs?: OscdEditorTemplateTextfield[];
    enumTypeDiff: boolean;
    enumTypeInputs?: OscdEditorTemplateTextfield[];
    editDialog?: OscdEditDialog;
    private onLNodeTypeInputChange;
    private onSaveLNodeType;
    private onDOTypeInputChange;
    private onSaveDOType;
    private onDATypeInputChange;
    private onSaveDAType;
    private onEnumTypeInputChange;
    private onSaveEnumType;
    handleCreateElement(createWizard: CreateWizard): Promise<void>;
    handleEditElement(editWizard: EditWizard): Promise<void>;
    handleCloseWizardEvent(): Promise<void>;
    private selectReferencedChild;
    private renderEnumTypeChildrenList;
    private renderEnumTypeList;
    private renderDATypeChildrenList;
    private renderDATypeList;
    private renderDOTypeChildrenList;
    private renderDOTypeList;
    private renderLNodeTypeChildrenList;
    private renderLNodeTypeList;
    render(): TemplateResult;
    static styles: import("lit").CSSResult;
}
export {};
